image: docker:latest

stages:
  - test
  - build
  - deploy

variables:
  NODE_ENV: production
  REACT_APP_VERSION: $CI_COMMIT_TAG
  REACT_APP_ENVIRONMENT: production
  CONTENT: 'Content-Type: application/json'
  ACCEPT: 'Accept: application/json'
  JSONDATA: '{"Username":"$PORTAINERUSERNAME","Password":"$PORTAINERUSERNAMEPASSWORD"}'
  BEARERKEY: ""
  CONEXCIST: "none"
  GITLABREPOURL: "https://gitlab.com/anonymous0230/opensourceecommerce"

before_script:
  - |
    BEARERKEY=$(curl -X POST "$PORTAINERURL/api/auth" --data "$JSONDATA" -H "$CONTENT" | jq -r '.jwt')
  - export NODE_OPTIONS=--openssl-legacy-provider

test-frontend:
  stage: test
  image: npm:latest
  script:
    - npm run test:ci
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    paths:
      - coverage/
    when: always
    reports:
      junit:
        - junit.xml

  before_script:
    - cd src
    - npm install typescript --save-dev
    - npm install

update_version_tag:
  stage: build
  script:
    - |
      if [ $CI_COMMIT_BRANCH != "main" ] && [ $CI_COMMIT_BRANCH != "staging" ] && [ $CI_COMMIT_BRANCH != "production" ]; then
      current_tag=$(git describe --tags --abbrev=0)
      if [ -z "$current_tag" ]; then
        version_tag="v01.00.00"
      else
        version_tag=$current_tag
      fi  
      if [[ $CI_COMMIT_MESSAGE == feat* ]]; then
        # Increment second decimal by 1
        new_version_tag=$(echo $version_tag | awk -F'.' '{printf "v%02d.%02d.%01x", $1, $2+1, $3}')
      elif [[ $CI_COMMIT_MESSAGE =~ (refactor|fix|build|style).* ]]; then
        # Increment last digit by 1
        new_version_tag=$(echo $version_tag | awk -F'.' '{printf "v%02d.%02d.%01x", $1, $2, $3+1}')
      else
        # No change to version tag
        new_version_tag=$version_tag
      fi
      echo "Setting version tag to" $new_version_tag
      git tag $new_version_tag
      git push origin $new_version_tag
      else  
      echo "Skipping version tag update for branch $CI_COMMIT_BRANCH"
      fi

deploy_staging:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  environment:
    name: staging
    url: "$LOCALIP14005"
  variables:
    PORTAINERRESPONSE: ""
    JSONDATAPOST: '{"Image":"nginx:latest","ExposedPorts":{"80/tcp":{}},"HostConfig":{"PortBindings":{"80/tcp":[{"HostPort":"14005"}]}}}'
    JSONBEARERKEY: '{"X-API-Key":"$BEARERKEY"}'
    JSONAuthorization: '{"Authorization":"Bearer $BEARERKEY"}'
    JSONDATAEXEC1: '{"AttachStdin":false,"AttachStdout":true,"AttachStderr":true,"Cmd":["git", "clone", "$GITLABREPOURL"]}'
    JSONDATAEXEC2: '{"AttachStdin":false,"AttachStdout":true,"AttachStderr":true,"Cmd":["git","checkout","staging"]}'
    JSONDATAEXEC3: '{"AttachStdin":false,"AttachStdout":true,"AttachStderr":true,"Cmd":["cd","src"]}'
    JSONDATAEXEC4: '{"AttachStdin":false,"AttachStdout":true,"AttachStderr":true,"Cmd":["Serve", "-s build -l 8444"]}'
  script:
    - |
      CONEXCIST=$(curl -X GET "$PORTAINERURL/api/endpoints/2/docker/containers/json?all=1" -H "Authorization":"Bearer $BEARERKEY" -H "$CONTENT" -H "$ACCEPT" | jq -r 'if length > 0 then .[] | select(.Names[0] == "/stagingWebsite") | .Id else "null" end')
    - |
      if [ -z "$CONEXCIST" ]; then
        PORTAINERRESPONSE=$(curl -X POST "$PORTAINERURL/api/endpoints/2/docker/containers/create?name=stagingWebsite" -H "Authorization":"Bearer $BEARERKEY" -H "$CONTENT" --data "$JSONDATAPOST" | jq -r '.Id')
        curl -X POST "$PORTAINERURL/api/endpoints/2/docker/containers/$PORTAINERRESPONSE/start" -H "Authorization":"Bearer $BEARERKEY" -H "$CONTENT"
      else
        PORTAINERRESPONSE=$CONEXCIST;
      fi
    - |
      curl -X POST "$PORTAINERURL/api/endpoints/2/docker/containers/$PORTAINERRESPONSE/exec" -H "Authorization":"Bearer $BEARERKEY" -H "$CONTENT" --data "$JSONDATAEXEC1"
      curl -X POST "$PORTAINERURL/api/endpoints/2/docker/containers/$PORTAINERRESPONSE/exec" -H "Authorization":"Bearer $BEARERKEY" -H "$CONTENT" --data "$JSONDATAEXEC2"
      curl -X POST "$PORTAINERURL/api/endpoints/2/docker/containers/$PORTAINERRESPONSE/exec" -H "Authorization":"Bearer $BEARERKEY" -H "$CONTENT" --data "$JSONDATAEXEC3"
      curl -X POST "$PORTAINERURL/api/endpoints/2/docker/containers/$PORTAINERRESPONSE/exec" -H "Authorization":"Bearer $BEARERKEY" -H "$CONTENT" --data "$JSONDATAEXEC4"
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'staging' && $CI_PIPELINE_SOURCE == 'merge_request_event'
  when: on_success

deploy_deployment:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  environment:
    name: deployment
    url: "$LOCALIP14004"
  variables:
    PORTAINERRESPONSE: ""
    JSONDATAPOST: '{"Image":"nginx:latest","ExposedPorts":{"80/tcp":{}},"HostConfig":{"PortBindings":{"80/tcp":[{"HostPort":"14005"}]}}}'
    JSONBEARERKEY: '{"X-API-Key":"$BEARERKEY"}'
    JSONAuthorization: '{"Authorization":"Bearer $BEARERKEY"}'
    JSONDATAEXEC1: '{"AttachStdin":false,"AttachStdout":true,"AttachStderr":true,"Cmd":["git", "clone", "$GITLABREPOURL"]}'
    JSONDATAEXEC2: '{"AttachStdin":false,"AttachStdout":true,"AttachStderr":true,"Cmd":["git","checkout","deployment"]}'
    JSONDATAEXEC3: '{"AttachStdin":false,"AttachStdout":true,"AttachStderr":true,"Cmd":["cd","src"]}'
    JSONDATAEXEC4: '{"AttachStdin":false,"AttachStdout":true,"AttachStderr":true,"Cmd":["Serve", "-s build -l 8444"]}'
  script:
    - |
      CONEXCIST=$(curl -X GET "$PORTAINERURL/api/endpoints/2/docker/containers/json?all=1" -H "Authorization":"Bearer $BEARERKEY" -H "$CONTENT" -H "$ACCEPT" | jq -r 'if length > 0 then .[] | select(.Names[0] == "/deploymentWebsite") | .Id else "null" end')
    - |
      if [ -z "$CONEXCIST" ]; then
        PORTAINERRESPONSE=$(curl -X POST "$PORTAINERURL/api/endpoints/2/docker/containers/create?name=deploymentWebsite" -H "Authorization":"Bearer $BEARERKEY" -H "$CONTENT" --data "$JSONDATAPOST" | jq -r '.Id')
        curl -X POST "$PORTAINERURL/api/endpoints/2/docker/containers/$PORTAINERRESPONSE/start" -H "Authorization":"Bearer $BEARERKEY" -H "$CONTENT"
      else
        PORTAINERRESPONSE=$CONEXCIST;
      fi
    - |
      curl -X POST "$PORTAINERURL/api/endpoints/2/docker/containers/$PORTAINERRESPONSE/exec" -H "Authorization":"Bearer $BEARERKEY" -H "$CONTENT" --data "$JSONDATAEXEC1"
      curl -X POST "$PORTAINERURL/api/endpoints/2/docker/containers/$PORTAINERRESPONSE/exec" -H "Authorization":"Bearer $BEARERKEY" -H "$CONTENT" --data "$JSONDATAEXEC2"
      curl -X POST "$PORTAINERURL/api/endpoints/2/docker/containers/$PORTAINERRESPONSE/exec" -H "Authorization":"Bearer $BEARERKEY" -H "$CONTENT" --data "$JSONDATAEXEC3"
      curl -X POST "$PORTAINERURL/api/endpoints/2/docker/containers/$PORTAINERRESPONSE/exec" -H "Authorization":"Bearer $BEARERKEY" -H "$CONTENT" --data "$JSONDATAEXEC4"
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'deployment' && $CI_PIPELINE_SOURCE == 'merge_request_event'
  when: on_success